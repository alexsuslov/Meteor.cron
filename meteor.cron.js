// Generated by CoffeeScript 1.8.0
(function() {
  Meteor.Cron = (function() {
    Cron.prototype.delay = 1000 * 60;

    Cron.events = [];

    function Cron(options) {
      if (options != null ? options.delay : void 0) {
        this.delay = options.delay;
      }
      if (options != null ? options.events : void 0) {
        this.convert(options.events);
      }
      this["do"]();
      this.watch();
    }

    Cron.prototype.convert = function(events) {
      var cron, event, isDate, isDay, isHour, isMin, isMon, self, _results;
      self = this;
      _results = [];
      for (event in events) {
        cron = event.split(/\s/);
        if (cron[0] >= 0 && cron[0] <= 59 || cron[0] === '*') {
          isMin = 1;
        }
        if (cron[1] >= 0 && cron[1] <= 23 || cron[1] === '*') {
          isHour = 1;
        }
        if (cron[2] >= 0 && cron[2] <= 31 || cron[2] === '*') {
          isDate = 1;
        }
        if (cron[3] >= 0 && cron[3] <= 12 || cron[3] === '*') {
          isMon = 1;
        }
        if (cron[4] >= 0 && cron[4] <= 6 || cron[4] === '*') {
          isDay = 1;
        }
        if (isMin && isHour && isDate && isMon && isDay) {
          _results.push(self.events.push({
            cron: cron,
            func: events[event]
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Cron.prototype.watch = function() {
      var self;
      self = this;
      return Meteor.setInterval(function() {
        return self["do"]();
      }, self.delay);
    };

    Cron.prototype.doEvent = function(event) {
      var cron, isDate, isDay, isHour, isMin, isMon;
      cron = event.cron;
      if (cron[0] === "" + this.now.getMinutes() || cron[0] === '*') {
        isMin = 1;
      }
      if (cron[1] === "" + this.now.getHours() || cron[1] === '*') {
        isHour = 1;
      }
      if (cron[2] === "" + this.now.getDate() || cron[2] === '*') {
        isDate = 1;
      }
      if (cron[3] === "" + this.now.getMonth() || cron[3] === '*') {
        isMon = 1;
      }
      if (cron[4] === "" + this.now.getDay() || cron[4] === '*') {
        isDay = 1;
      }
      if (isMin && isHour && isDate && isMon && isDay) {
        return event.func();
      }
    };

    Cron.prototype["do"] = function() {
      var event, _i, _len, _ref, _results;
      this.now = new Date();
      _ref = this.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push(this.doEvent(event));
      }
      return _results;
    };

    return Cron;

  })();

}).call(this);
